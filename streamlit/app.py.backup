# streamlit/app.py
import streamlit as st
import sys
import os
from datetime import datetime
import time

# Add src to path for importing your controllers if needed
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

# Try to import API client for status checks
try:
    sys.path.append(os.path.join(os.path.dirname(__fi# Technology & Integration section
st.markdown("### 🛠️ Technology Stack")

tech_col1, tech_col2, tech_col3 = st.columns(3)

with tech_col1:
    st.markdown("""
    <div class="info-card">
        <h4>🤖 AI Models</h4>
        <p><strong>YOLOv8:</strong> Real-time object detection</p>
        <p><strong>BLIP:</strong> Image captioning & search</p>
        <p><strong>Custom Training:</strong> Domain-specific optimization</p>
    </div>
    """, unsafe_allow_html=True)

with tech_col2:
    st.markdown("""
    <div class="info-card">
        <h4>🔧 Backend</h4>
        <p><strong>FastAPI:</strong> High-performance API</p>
        <p><strong>PostgreSQL:</strong> Reliable data storage</p>
        <p><strong>Redis:</strong> Caching & job queues</p>
    </div>
    """, unsafe_allow_html=True)

with tech_col3:
    st.markdown("""
    <div class="info-card">
        <h4>🎨 Frontend</h4>
        <p><strong>Streamlit:</strong> Interactive interface</p>
        <p><strong>Real-time:</strong> Live status updates</p>
        <p><strong>Responsive:</strong> Mobile-friendly design</p>
    </div>
    """, unsafe_allow_html=True)

# Demo and getting started section
st.markdown("---")

# Create two main sections
demo_col, start_col = st.columns(2)

with demo_col:
    st.markdown("### 🎭 Demo Mode")
    st.info("**Perfect for presentations and testing!**")
    st.markdown("""
    **Features:**
    - ✅ No backend required
    - ✅ Sample data and analytics
    - ✅ Full UI demonstration
    - ✅ Interactive examples
    """)
    
    if st.button("🚀 Explore Demo Features", use_container_width=True):
        st.success("Navigate to any page and click the demo buttons!")

with start_col:
    st.markdown("### 🚀 Production Mode")
    if st.session_state.system_status == 'online':
        st.success("**Backend is ready!**")
        st.markdown("""
        **Ready to use:**
        - ✅ Real-time processing
        - ✅ Live analytics
        - ✅ Full functionality
        - ✅ Data persistence
        """)
    else:
        st.warning("**Backend required for full functionality**")
        st.markdown("""
        **To enable:**
        - 🔧 Start the FastAPI backend
        - 🔧 Ensure database connection
        - 🔧 Load AI models
        - 🔧 Check system status
        """)
    
    if st.button("🔧 Check System Status", use_container_width=True):
        st.rerun()m utils.api_client import SurveillanceAPIClient
    API_AVAILABLE = True
except ImportError:
    API_AVAILABLE = False

st.set_page_config(
    page_title="🔍 Intelligent Surveillance System",
    page_icon="🔍",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/your-repo/surveillance-system',
        'Report a bug': 'https://github.com/your-repo/surveillance-system/issues',
        'About': """
        # Intelligent Surveillance System
        AI-powered video analysis platform with real-time object detection,
        natural language search, and comprehensive analytics.
        
        **Version:** 1.0.0  
        **Technologies:** YOLOv8, BLIP, FastAPI, Streamlit
        """
    }
)

# Custom CSS for production-ready styling
st.markdown("""
<style>
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Global styles */
    .stApp {
        font-family: 'Inter', sans-serif;
    }
    
    /* Header styles */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 16px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.25);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }
    
    .main-header p {
        font-size: 1.1rem;
        margin: 0;
        opacity: 0.9;
        font-weight: 400;
    }
    
    /* Feature cards */
    .feature-card {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9ff 100%);
        padding: 2rem 1.5rem;
        border-radius: 16px;
        border: 1px solid #e2e8f0;
        margin: 0.5rem 0;
        text-align: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: hidden;
    }
    
    .feature-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 24px rgba(102, 126, 234, 0.15);
        border-color: #667eea;
    }
    
    .feature-card:hover::before {
        opacity: 1;
    }
    
    .feature-card h3 {
        margin: 0 0 1rem 0;
        color: #1a202c;
        font-size: 1.3rem;
        font-weight: 600;
    }
    
    .feature-card p {
        margin: 0;
        color: #64748b;
        font-size: 0.95rem;
        line-height: 1.5;
    }
    
    /* Status indicators */
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 500;
        margin: 0.25rem;
    }
    
    .status-online {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
    }
    
    .status-offline {
        background: #fef2f2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }
    
    .status-demo {
        background: #fef3c7;
        color: #92400e;
        border: 1px solid #fde68a;
    }
    
    /* Quick stats */
    .quick-stat {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }
    
    .quick-stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #667eea;
        margin: 0;
    }
    
    .quick-stat-label {
        font-size: 0.85rem;
        color: #64748b;
        margin: 0.25rem 0 0 0;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 500;
    }
    
    /* Info cards */
    .info-card {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
    }
    
    .info-card h4 {
        color: #1a202c;
        margin: 0 0 1rem 0;
        font-weight: 600;
    }
    
    /* Navigation cards */
    .nav-card {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    .nav-card:hover {
        border-color: #667eea;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.1);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .main-header {
            padding: 1.5rem;
        }
        
        .main-header h1 {
            font-size: 2rem;
        }
        
        .feature-card {
            padding: 1.5rem 1rem;
        }
    }
    
    /* Custom button styles */
    .stButton > button {
        border-radius: 8px;
        border: none;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state for system status
if 'system_status' not in st.session_state:
    st.session_state.system_status = 'checking'
if 'last_status_check' not in st.session_state:
    st.session_state.last_status_check = 0

# Function to check system status
def check_system_status():
    """Check if the backend API is available"""
    if not API_AVAILABLE:
        return False
    
    try:
        api_client = SurveillanceAPIClient()
        # Try a simple health check endpoint
        response = api_client.get_database_stats()
        return response.get("success", False)
    except Exception:
        return False

# Check system status periodically (every 30 seconds)
current_time = time.time()
if current_time - st.session_state.last_status_check > 30:
    st.session_state.system_status = 'online' if check_system_status() else 'offline'
    st.session_state.last_status_check = current_time

# Main header with status indicator
header_col1, header_col2 = st.columns([4, 1])

with header_col1:
    st.markdown("""
    <div class="main-header">
        <h1>🔍 Intelligent Surveillance System</h1>
        <p>Enterprise-grade AI video analysis with real-time object detection and natural language search</p>
    </div>
    """, unsafe_allow_html=True)

with header_col2:
    st.markdown("<br>", unsafe_allow_html=True)  # Spacing
    if st.session_state.system_status == 'online':
        st.markdown("""
        <div class="status-indicator status-online">
            🟢 System Online
        </div>
        """, unsafe_allow_html=True)
    elif st.session_state.system_status == 'offline':
        st.markdown("""
        <div class="status-indicator status-offline">
            🔴 Backend Offline
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="status-indicator status-demo">
            🟡 Demo Mode Available
        </div>
        """, unsafe_allow_html=True)

# Quick overview
st.markdown("## 🚀 AI-Powered Video Surveillance")

# Main feature cards
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.markdown("""
    <div class="feature-card">
        <h3>🎬 Process</h3>
        <p>Upload videos for AI analysis</p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown("""
    <div class="feature-card">
        <h3>🔍 Search</h3>
        <p>Query footage naturally</p>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown("""
    <div class="feature-card">
        <h3>� Analyze</h3>
        <p>View detection insights</p>
    </div>
    """, unsafe_allow_html=True)

with col4:
    st.markdown("""
    <div class="feature-card">
        <h3>⚙️ Monitor</h3>
        <p>Check system status</p>
    </div>
    """, unsafe_allow_html=True)

# Demo mode highlight
st.markdown("---")
st.info("🎭 **Try Demo Mode**: Each page has demo buttons to show examples without backend setup!")

# Getting started
st.markdown("### � Get Started")
start_col1, start_col2 = st.columns(2)

with start_col1:
    st.markdown("**� For Demo/Presentation:**")
    st.markdown("→ Click any page and use the demo buttons")

with start_col2:
    st.markdown("**🔧 For Real Usage:**") 
    st.markdown("→ Start with Video Processing page")

# Sidebar info
with st.sidebar:
    st.markdown("### 🎯 Pages")
    st.markdown("📤 **Video Processing** - Upload & analyze")
    st.markdown("🔍 **Semantic Search** - Natural queries") 
    st.markdown("📊 **Analytics** - View insights")
    st.markdown("⚙️ **System Status** - Health check")
    
    st.markdown("---")
    st.markdown("### 💡 Tips")
    st.markdown("• Use demo buttons for presentations")
    st.markdown("• Backend runs on port 5000")
    st.markdown("• AI models: YOLOv8 + BLIP")